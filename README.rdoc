= xss_terminate

{<img src="https://travis-ci.org/coupa/xss_terminate.svg?branch=master" alt="Build Status" />}[https://travis-ci.org/coupa/xss_terminate]

+xss_terminate+ sanitizes your data before it hits the database so that you
don't end up storing XSS attacks. You should still HTML-escape or HTML-sanitize
the data before displaying in a HTML page.

To install, add `xss_terminate` to your `Gemfile`.

== HTML sanitization

Formats supported:

* <tt>:text</tt>: (default) The text sanitizer removes anything that looks like tags. This function processes the strings as text characters, and will produce only text. For example, it will not HTML escape your characters, since after they are HTML-escaped, the output is technically HTML now instead of plain text. The Rails's built-in +strip_tags+ method is not used because it produces HTML and will remove incomplete tags. For example `strip_tags("a<b")` will return "a".
* <tt>:html</tt>: The HTML sanitizer used is the <tt>Rails::Html::WhiteListSanitizer</tt>. It removes bad HTML after parsing it as HTML. It should be tolerant of invalid HTML. Bad tags are removed.
* <tt>:raw</tt>: The "raw" format does not sanitize. You can use this to turn off xss_terminate.

== Usage

Installing the plugin creates a +before_validation+ hook that will strip HTML tags
from all string and text fields. No further configuration is necessary if this
is what you want. To customize the default behavior, you use the
+XssTerminate.configure+ class method.

 XssTerminate.configure do |c|
   # These are the default options applied to each attribute
   c.default_options = {
     format: :text,    # Sanitizes as text by default
   }
 end

To exempt some fields from sanitization, set the <tt>:format</tt> option to <tt>:raw</tt>. You can also set <tt>:format</tt> to a Proc which returns the format.

 class Comment < ActiveRecord::Base
   xss_terminate :body, format: :raw
 end

 class Comment < ActiveRecord::Base
   def sanitize_body?
     @sanitize_body.nil? ? true : @sanitize_body
   end

   xss_terminate :body, format: ->(r) do
     r.sanitize_body? ? :text : :raw
   end
 end

If your column is for text, you should use:

  class Review < ActiveRecord::Base
    xss_terminate :title, format: text
    xss_terminate [:publisher, :author_name], format: :text
  end
 
If your column is for HTML, you should use:

 class Entry < ActiveRecord::Base
   xss_terminate :body_html, format: :html
 end
 
Properties are inherited by child classes, unless specifically override.

 class ChildReview < Review
   # title is now processed as HTML
   # publisher and author_name continue to be processed as text
   xss_terminate :title, format: :html
 end

== Credits

This fork is currently used by Coupa Software Incorporated, and is derived from jystewart/xss_terminate.

Written by {Luke Francl}[http://railspikes.com] and based on acts_as_sanitized by 
{Alex Payne}[http://www.al3x.net].

HTML5Lib sanitization by {Jacques Distler}[http://golem.ph.utexas.edu/~distler].

Bug fixes and reports from a cast of thousands.

== License

MIT License, except for lib/html5lib_sanitize.rb which is under the 
Ruby license and copyright to Jacques Distler.
